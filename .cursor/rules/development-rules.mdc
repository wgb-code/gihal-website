---
description: Regras de desenvolvimento Next.js para projetos frontend seguindo padr√µes de desenvolvedor senior
globs: 
  - "**/*.{ts,tsx,js,jsx}"
  - "**/*.{css,scss,sass}"
  - "**/page.tsx"
  - "**/layout.tsx"
  - "**/loading.tsx"
  - "**/error.tsx"
  - "**/not-found.tsx"
alwaysApply: true
---

# Regras de Desenvolvimento Next.js - Frontend Senior

## Estrutura e Arquitetura

### Organiza√ß√£o de Pastas
- Use a estrutura App Router do Next.js 13+ (`app/` directory)
- Organize componentes em: `components/ui/`, `components/forms/`, `components/layout/`
- Mantenha utilit√°rios em: `lib/`, `utils/`, `hooks/`
- Separe tipos em: `types/` ou `@types/`
- Jamais use l√≥gica, layout, valida√ß√µes no mesmo arquivo, separe em `hooks`, `controller`, `validations` etc...

### Nomenclatura
- **Componentes**: PascalCase (`UserProfile.tsx`)
- **P√°ginas**: kebab-case para rotas (`user-profile/page.tsx`)
- **Hooks customizados**: prefixo `use` (`useLocalStorage.ts`)
- **Utilit√°rios**: camelCase (`formatCurrency.ts`)
- **Constantes**: SNAKE_CASE (`API_ENDPOINTS.ts`)

## ‚öõÔ∏è Componentes React

### Estrutura de Componentes
```typescript
// 1. Imports (React, Next.js, third-party, local)
// 2. Types/Interfaces
// 3. Component definition
// 4. Default export
```

### Boas Pr√°ticas
- **SEMPRE** use TypeScript com tipagem expl√≠cita
- Prefira `interface` sobre `type` para props de componentes
- Use `React.FC` apenas quando necess√°rio (props com children)
- Implemente error boundaries para componentes cr√≠ticos
- Use `forwardRef` quando necess√°rio para refs
- Evite `any` - use `unknown` ou tipos espec√≠ficos
- Crie fun√ß√µes, const e componentes que possa ser reutilizados para manter a consistencia do layout

### Performance
- Use `React.memo()` para componentes que recebem props complexas
- Implemente `useMemo()` e `useCallback()` para computa√ß√µes custosas
- Use `lazy loading` com `React.lazy()` e `Suspense`
- Otimize re-renders desnecess√°rios

## üîÑ Estado e Dados

### Gerenciamento de Estado
- **Estado local**: `useState`, `useReducer`
- **Estado global**: Zustand ou Redux Toolkit (evite Context API para estado global)
- **Estado do servidor**: TanStack Query (React Query) ou SWR
- **Formul√°rios**: React Hook Form + Zod para valida√ß√£o

### Fetching de Dados
- Use Server Components quando poss√≠vel
- Implemente loading e error states
- Use `use()` hook para promises no React 18+
- Configure revalida√ß√£o adequada (`revalidate`, `tags`)

## üé® Styling e UI

### CSS/Styling
- **Prefer√™ncia**: Tailwind CSS com classes utilit√°rias
- **Componentes**: shadcn/ui como base
- Implemente dark mode com `next-themes` quando for pedido.
- Configure responsive design (mobile-first)

### Acessibilidade
- **SEMPRE** implemente atributos ARIA adequados
- Use semantic HTML (`header`, `main`, `nav`, `section`)
- Teste navega√ß√£o por teclado
- Configure contrast ratios adequados
- Implemente focus management

## üõ£Ô∏è Routing e Navega√ß√£o

### App Router (Next.js 13+)
- Use `page.tsx` para p√°ginas
- `layout.tsx` para layouts aninhados
- `loading.tsx` para estados de carregamento
- `error.tsx` para tratamento de erros
- `not-found.tsx` para p√°ginas 404

### Navega√ß√£o
- Use `useRouter()` do `next/navigation`
- Implemente breadcrumbs para navega√ß√£o complexa
- Configure middleware para autentica√ß√£o/autoriza√ß√£o

## üìä Performance e SEO

### Otimiza√ß√µes Next.js
- Use `next/image` para otimiza√ß√£o autom√°tica
- Configure `next/font` para web fonts
- Implemente ISR (Incremental Static Regeneration) quando apropriado
- Use `generateStaticParams` para rotas din√¢micas

### SEO
- Configure `metadata` API em cada p√°gina
- Implemente Open Graph e Twitter Cards
- Use structured data (JSON-LD)
- Configure sitemap.xml e robots.txt

## üîí Seguran√ßa e Valida√ß√£o

### Valida√ß√£o
- **SEMPRE** valide dados no cliente E servidor
- Use Zod para schemas de valida√ß√£o
- Sanitize inputs do usu√°rio
- Implemente rate limiting

### Autentica√ß√£o
- Configure CSRF protection
- Use cookies httpOnly para tokens

## üö´ Evite Sempre

- Muta√ß√£o direta de state
- Props drilling excessivo
- Componentes com mais de 200 linhas
- useEffect para l√≥gica que deveria estar em event handlers
- Imports absolutos sem aliases configurados
- Console.log em c√≥digo de produ√ß√£o
- Componentes an√¥nimos em JSX
- Estados desnecess√°rios (derive quando poss√≠vel)
- Coment√°rios desnecess√°rios quando o c√≥digo √© auto explicativo e facil de interpretar
- Instalar bibliotecas, sempre sugira a instala√ß√£o quando necessario, mas n√£o instale

> **Lembre-se**: Essas regras devem ser seguidas SEMPRE. Em caso de d√∫vida, priorize legibilidade, performance e manutenibilidade do c√≥digo.